function Network.new 0
push constant 6
call Memory.alloc 1
pop pointer 0
push constant 7000
call Memory.alloc 1
pop this 0
push constant 80
call Memory.alloc 1
pop this 1
push constant 8
call Memory.alloc 1
pop this 2
push constant 8
call Memory.alloc 1
pop this 3
push constant 10
call Memory.alloc 1
pop this 4
push constant 10
call Memory.alloc 1
pop this 5
push pointer 0
return
function Network.add32 5
push constant 2
call Array.new 1
pop local 0
push constant 0
pop local 2
push constant 0
pop local 3
push constant 1
pop local 1
push constant 0
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label WHILE_EXP0
push local 2
push constant 16
lt
not
if-goto WHILE_END0
push argument 1
push local 1
and
push local 1
call Math.divide 2
push argument 3
push local 1
and
push local 1
call Math.divide 2
add
push local 3
add
pop local 4
push local 4
push constant 3
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 3
push constant 1
push local 0
add
push constant 1
push local 0
add
pop pointer 1
push that 0
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push local 4
push constant 2
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
pop local 3
label IF_FALSE1
push local 4
push constant 1
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop local 3
push constant 1
push local 0
add
push constant 1
push local 0
add
pop pointer 1
push that 0
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE2
push local 4
push constant 0
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
pop local 3
label IF_FALSE3
push local 2
push constant 1
add
pop local 2
push local 1
push constant 2
call Math.multiply 2
pop local 1
goto WHILE_EXP0
label WHILE_END0
push constant 1
pop local 1
label WHILE_EXP1
push local 2
push constant 32
lt
not
if-goto WHILE_END1
push argument 0
push local 1
and
push local 1
call Math.divide 2
push argument 2
push local 1
and
push local 1
call Math.divide 2
add
push local 3
add
pop local 4
push local 4
push constant 3
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push constant 1
pop local 3
push constant 0
push local 0
add
push constant 0
push local 0
add
pop pointer 1
push that 0
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE4
push local 4
push constant 2
eq
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 1
pop local 3
label IF_FALSE5
push local 4
push constant 1
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
pop local 3
push constant 0
push local 0
add
push constant 0
push local 0
add
pop pointer 1
push that 0
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE6
push local 4
push constant 0
eq
if-goto IF_TRUE7
goto IF_FALSE7
label IF_TRUE7
push constant 0
pop local 3
label IF_FALSE7
push local 2
push constant 1
add
pop local 2
push local 1
push constant 2
call Math.multiply 2
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
return
function Network.subtract32 4
push argument 2
not
pop argument 2
push argument 3
not
pop argument 3
push argument 3
push constant 1
add
pop argument 3
push argument 2
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push argument 3
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push argument 0
push argument 1
push argument 2
push argument 3
call Network.add32 4
return
function Network.mul32 5
push constant 2
call Array.new 1
pop local 0
push constant 2
call Array.new 1
pop local 1
push constant 0
pop local 3
push constant 0
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
pop local 2
label WHILE_EXP0
push local 3
push constant 16
lt
not
if-goto WHILE_END0
push argument 3
push local 2
and
push local 2
call Math.divide 2
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 1
push local 0
add
pop pointer 1
push that 0
push argument 0
push argument 1
call Main.add 4
pop local 1
push constant 0
push local 0
add
push constant 0
push local 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push constant 1
push local 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push argument 0
push argument 1
push argument 0
push argument 1
call Main.add 4
pop local 1
push constant 0
push local 1
add
pop pointer 1
push that 0
pop argument 0
push constant 1
push local 1
add
pop pointer 1
push that 0
pop argument 1
push local 3
push constant 1
add
pop local 3
push local 2
push constant 2
call Math.multiply 2
pop local 2
goto WHILE_EXP0
label WHILE_END0
push constant 1
pop local 2
label WHILE_EXP1
push local 3
push constant 32
lt
not
if-goto WHILE_END1
push argument 2
push local 2
and
push local 2
call Math.divide 2
push constant 1
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 1
push local 0
add
pop pointer 1
push that 0
push argument 0
push argument 1
call Main.add 4
pop local 0
label IF_FALSE1
push argument 0
push argument 1
push argument 0
push argument 1
call Main.add 4
pop local 1
push constant 0
push local 1
add
pop pointer 1
push that 0
pop argument 0
push constant 1
push local 1
add
pop pointer 1
push that 0
pop argument 1
push local 3
push constant 1
add
pop local 3
push local 2
push constant 2
call Math.multiply 2
pop local 2
goto WHILE_EXP1
label WHILE_END1
push local 1
call Array.dispose 1
pop temp 0
push local 0
return
function Network.cmp32 2
push argument 0
push argument 1
push argument 2
push argument 3
call Network.subtract32 4
pop local 0
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
pop local 1
goto IF_END0
label IF_FALSE0
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 0
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
pop local 1
goto IF_END1
label IF_FALSE1
push constant 1
push local 0
add
pop pointer 1
push that 0
push constant 0
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
pop local 1
goto IF_END2
label IF_FALSE2
push constant 1
pop local 1
label IF_END2
label IF_END1
label IF_END0
push local 0
call Array.dispose 1
pop temp 0
push local 1
return
function Network.vecDot16 2
push constant 2
call Array.new 1
pop local 0
push constant 0
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 1
label WHILE_EXP0
push local 1
push argument 2
lt
not
if-goto WHILE_END0
push local 1
push argument 0
add
pop pointer 1
push that 0
push local 1
push argument 1
add
pop pointer 1
push that 0
call Math.multiply 2
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
neg
push local 1
push argument 0
add
pop pointer 1
push that 0
push local 1
push argument 1
add
pop pointer 1
push that 0
call Math.multiply 2
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 1
push local 0
add
pop pointer 1
push that 0
call Network.add32 4
pop local 0
goto IF_END0
label IF_FALSE0
push constant 0
push local 1
push argument 0
add
pop pointer 1
push that 0
push local 1
push argument 1
add
pop pointer 1
push that 0
call Math.multiply 2
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 1
push local 0
add
pop pointer 1
push that 0
call Network.add32 4
pop local 0
label IF_END0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Network.vecDot32 3
push constant 2
call Array.new 1
pop local 0
push constant 0
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
pop local 2
label WHILE_EXP0
push local 2
push argument 3
lt
not
if-goto WHILE_END0
push local 2
push argument 2
add
pop pointer 1
push that 0
push constant 0
lt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push argument 0
add
pop pointer 1
push that 0
push local 2
push argument 1
add
pop pointer 1
push that 0
push constant 1
neg
push local 2
push argument 2
add
pop pointer 1
push that 0
call Network.mul32 4
pop local 1
goto IF_END0
label IF_FALSE0
push local 2
push argument 0
add
pop pointer 1
push that 0
push local 2
push argument 1
add
pop pointer 1
push that 0
push constant 0
push local 2
push argument 2
add
pop pointer 1
push that 0
call Network.mul32 4
pop local 1
label IF_END0
push constant 0
push local 1
add
pop pointer 1
push that 0
push constant 1
push local 1
add
pop pointer 1
push that 0
push constant 0
push local 0
add
pop pointer 1
push that 0
push constant 1
push local 0
add
pop pointer 1
push that 0
call Network.add32 4
pop local 0
push local 2
push constant 1
add
pop local 2
goto WHILE_EXP0
label WHILE_END0
push local 0
return
function Network.vecAdd32 2
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 4
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
pop pointer 1
push that 0
push local 0
push argument 1
add
pop pointer 1
push that 0
push local 0
push argument 2
add
pop pointer 1
push that 0
push local 0
push argument 3
add
pop pointer 1
push that 0
call Network.add32 4
pop local 1
push local 0
push argument 0
add
push constant 0
push local 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push argument 1
add
push constant 1
push local 1
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Network.relu 1
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push argument 2
lt
not
if-goto WHILE_END0
push local 0
push argument 0
add
pop pointer 1
push that 0
push local 0
push argument 1
add
pop pointer 1
push that 0
push constant 0
push constant 0
call Network.cmp32 4
push constant 1
neg
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 0
push argument 0
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push argument 1
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF_FALSE0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Network.argMax 4
push constant 1
neg
pop local 0
push constant 1
neg
pop local 1
push constant 0
pop local 2
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push argument 2
lt
not
if-goto WHILE_END0
push local 3
push argument 0
add
pop pointer 1
push that 0
push local 3
push argument 1
add
pop pointer 1
push that 0
push local 0
push local 1
call Network.cmp32 4
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 3
pop local 2
push local 3
push argument 0
add
pop pointer 1
push that 0
pop local 0
push local 3
push argument 1
add
pop pointer 1
push that 0
pop local 1
label IF_FALSE0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push local 2
return
function Network.forward 9
push argument 0
pop pointer 0
push constant 8
call Array.new 1
pop local 0
push constant 8
call Array.new 1
pop local 1
push constant 8
call Array.new 1
pop local 2
push constant 8
call Array.new 1
pop local 3
push constant 0
pop local 8
push constant 0
pop local 6
label WHILE_EXP0
push local 6
push constant 8
lt
not
if-goto WHILE_END0
push argument 1
push this 0
push constant 784
push local 6
call Math.multiply 2
add
push constant 784
call Network.vecDot16 3
pop local 4
push local 6
push local 0
add
push constant 0
push local 4
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 6
push local 1
add
push constant 1
push local 4
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP0
label WHILE_END0
push local 0
push local 1
push this 2
push this 3
push constant 8
call Network.vecAdd32 5
pop temp 0
push local 0
push local 1
push constant 8
call Network.relu 3
pop temp 0
push constant 0
pop local 6
label WHILE_EXP1
push local 6
push constant 10
lt
not
if-goto WHILE_END1
push local 0
push local 1
push this 1
push constant 8
push local 6
call Math.multiply 2
add
push constant 8
call Network.vecDot32 4
pop local 4
push local 6
push local 2
add
push constant 0
push local 4
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 6
push local 3
add
push constant 1
push local 4
add
pop pointer 1
push that 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 6
push constant 1
add
pop local 6
goto WHILE_EXP1
label WHILE_END1
push local 2
push local 3
push this 4
push this 5
push constant 8
call Network.vecAdd32 5
pop temp 0
push local 2
push local 3
push constant 10
call Network.argMax 3
pop local 8
push local 8
return
function Network.test 4
push argument 0
pop pointer 0
push constant 8
call Array.new 1
pop local 0
push constant 8
call Array.new 1
pop local 1
push constant 0
pop local 3
label WHILE_EXP0
push local 3
push constant 8
lt
not
if-goto WHILE_END0
push local 3
push local 0
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push local 1
add
push local 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 3
push constant 1
add
pop local 3
goto WHILE_EXP0
label WHILE_END0
push local 0
push constant 4
add
push local 1
push constant 4
add
push constant 4
call Network.vecDot16 3
pop local 2
push constant 0
push local 2
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push constant 1
call String.new 1
push constant 32
call String.appendChar 2
call Output.printString 1
pop temp 0
push constant 1
push local 2
add
pop pointer 1
push that 0
call Output.printInt 1
pop temp 0
push local 2
return
